# -*- python -*-
# ex: set filetype=python:

import os
from buildbot.plugins import *
from datetime import timedelta

from buildbot.schedulers.forcesched import StringParameter, FixedParameter

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# ------ WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

c['workers'] = [worker.Worker(
    "utility-worker",
    'pass'),
]

if 'BUILDBOT_MQ_URL' in os.environ:
    c['mq'] = {
        'type': 'wamp',
        'router_url': os.environ['BUILDBOT_MQ_URL'],
        'realm': os.environ.get('BUILDBOT_MQ_REALM', 'buildbot').decode('utf-8'),
        'debug': 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_websockets': 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_lowlevel': 'BUILDBOT_MQ_DEBUG' in os.environ,
    }
# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': os.environ.get("BUILDBOT_WORKER_PORT", 9989)}}


# for local only
# c['protocols'] = {"pb": {"port": "tcp:9989:interface=127.0.0.1"}}

# ------ CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of MedScanAi.

# c['change_source'] = []
# c['change_source'].append(changes.GitPoller(
#        'git://github.com/buildbot/pyflakes.git',
#        workdir='gitpoller-workdir', branch='master',
#        pollinterval=300))


# ------ SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []

# ------ BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

# DEMO BUILD
factory = util.BuildFactory()
# check out the source
factory.addStep(steps.Git(
    repourl='http://github.com/buildbot/pyflakes.git', mode='incremental'))
# run the tests (note that this will require that 'trial' is installed)
factory.addStep(steps.ShellCommand(command=["trial", "pyflakes"]))


# -------- REPORTERS

c['services'] = []


# -------- STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# like IRC bots.

c['status'] = []


#--------- configurators

# configure a janitor which will delete all logs older than one month,
# and will run on sundays at noon
c['configurators'] = [util.JanitorConfigurator(
    logHorizon=timedelta(weeks=4),
    hour=12,
    dayOfWeek=6
)]


# -------- PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "demo"
c['titleURL'] = "demo"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = os.environ.get(
    "BUILDBOT_WEB_URL", "http://localhost:8010/")

# minimalistic config to activate new web UI
c['www'] = dict(
    port=os.environ.get("BUILDBOT_WEB_PORT", 8010),
    plugins=dict(waterfall_view={}, console_view={}, grid_view={}),
)

# -------- AUTHENTICATION

c['www']['authz'] = util.Authz(
    allowRules=[
        util.AnyEndpointMatcher(role="admins")
    ],
    roleMatchers=[
        util.RolesFromUsername(roles=['admins'], usernames=['admin'])
    ]
)
# for testing
c['www']['auth'] = util.UserPasswordAuth([('admin', 'admin')])

# -------- DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.
    # You can leave this at its default for all but the largest installations.
    'db_url': os.environ.get("BUILDBOT_DB_URL", "sqlite://").format(**os.environ),
}


# -------- Log Handling
c['logCompressionMethod'] = 'lz4'  # required lz4 package
